set nocompatible              " be iMproved, required
filetype off                  " required
let mapleader = "\<Space>"
set noswapfile
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'davidhalter/jedi-vim'

Plugin 'airblade/vim-gitgutter'
" ]c jump to next hunk (change) 
" [c jump to previous hunk (change) 

Plugin 'vim-airline/vim-airline'
Plugin 'wincent/command-t'
Plugin 'scrooloose/nerdTree'
Plugin 'scrooloose/syntastic'
Plugin 'vim-scripts/ctrlp.vim'
Plugin 'vim-multiple-cursors'
Plugin 'tpope/vim-surround'
Plugin 'Valloric/YouCompleteMe'
Plugin 'jiangmiao/auto-pairs'
"Commands for surround plugin
"ds<character>                  Delete surrounding <character>
"cs<character><new character>   Replace surrounding <character> with <newcharacter>
"ys<text-obj><character>        Surround text-object with <character>
"dst                            Delete surround tag (works on HTML tags)

Plugin 'tpope/vim-commentary'
"Commands for Commenting"
"gc2j   Comment down two lines
"gcc    Comment out the current line
"gcip   Comment out the current paragraph

Plugin 'tpope/vim-repeat'

Plugin 'mattn/emmet-vim'
" Commands for emmet
" type for example div.foo then <C-y> , 

Plugin 'vim-scripts/cucumber.zip'

Plugin 'tpope/vim-fugitive'
Plugin 'crusoexia/vim-monokai'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'vim-scripts/taglist.vim'
Plugin 'majutsushi/tagbar'
Plugin 'kchmck/vim-coffee-script'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
Plugin 'alexbyk/vim-ultisnips-js-testing'
Plugin 'Yggdroot/indentLine'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" All of your Plugins must be added before the following line
call vundle#end()            " required

" Disable the tab selection of the YouCompleteMe
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

" filetype plugin indent on    " required
autocmd BufWritePre *.* :%s/\s\+$//e
set relativenumber
set colorcolumn=80
set nowrap
set expandtab
set autoindent

set shiftwidth=4
set softtabstop=4
set cursorline  "Add line below the active line unde cursor
syntax enable
colorscheme monokai

set smartcase
set ignorecase
set incsearch
set hlsearch
nnoremap <ESC> :nohlsearch<CR>

set clipboard=unnamed
"Highlight the active split
nmap 0 ^
nmap k gk
nmap j gj

"Move lines up, down, left and right
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
nnoremap <C-l> >>
nnoremap <C-h> <<
vnoremap <C-h> <gv
vnoremap <C-l> >gv

" Scroll through the autocomple list with jk
inoremap <expr> j ((pumvisible())?("\<C-n>"):("j"))
inoremap <expr> k ((pumvisible())?("\<C-p>"):("k"))

" Add some syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0 
let g:syntastic_check_on_open = 0 
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['jshint', 'eslint',  'jscs']
let g:syntastic_mode_map = { 'passive_filetypes': ['python', 'javascript'] }

let g:used_javascript_libs = 'chai,jquery,requirejs,react'

let g:ctrlp_use_caching = 0
let g:ctrlp_max_files=0
let g:ctrlp_user_command = 'ag %s -l -i --hidden --nocolor -g ""'
let g:ctrlp_use_caching = 0
let g:ctrlp_by_filename = 1
let g:ctrlp_cmd = 'CtrlPMixed'

let g:indentLine_color_term = 239

set list lcs=tab:\â”†_
set backspace=indent,eol,start

" Use silver searcher for grep 
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --hidden
endif
" bind <C-g> to grep word under cursor and open in quickfix buffer
nnoremap <C-g> :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><C-w>L
nnoremap <C-x> :q <CR>

nmap <Leader>o :CtrlP<CR><C-\>:exe f

" Open function definition in a vertical split
nnoremap <C-]> :vsp <CR>:exec("tag /".expand("<cword>"))<CR><C-w>L
autocmd VimEnter * NERDTree

if filereadable(glob("~/.vimrc.local")) 
    source ~/.vimrc.local
endif

" Auto hightlight the best match in autocomplete menu
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :  '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
