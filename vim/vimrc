set nocompatible              " be iMproved, required
filetype off                  " required
syntax enable
let mapleader = "\<Space>"
set noswapfile
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'airblade/vim-gitgutter'
" ]c jump to next hunk (change) 
" [c jump to previous hunk (change) 

Plugin 'vim-airline/vim-airline'
Plugin 'scrooloose/nerdTree'
Plugin 'scrooloose/syntastic'
Plugin 'vim-multiple-cursors'
Plugin 'Valloric/YouCompleteMe'
Plugin 'ternjs/tern_for_vim'
Plugin 'tpope/vim-surround'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
"Commands for surround plugin
"ds<character>                  Delete surrounding <character>
"cs<character><new character>   Replace surrounding <character> with <newcharacter>
"ys<text-obj><character>        Surround text-object with <character>
"dst                            Delete surround tag (works on HTML tags)

Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-fugitive'
Plugin 'pangloss/vim-javascript'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'crusoexia/vim-monokai'
Plugin 'tomasr/molokai'

" The below plugin for vim snipmate
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'garbas/vim-snipmate'
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
Plugin 'alexbyk/vim-ultisnips-js-testing'
Plugin 'Yggdroot/indentLine'
Plugin 'jiangmiao/auto-pairs'
Plugin 'FooSoft/vim-argwrap'
Plugin 'terryma/vim-expand-region'
Plugin 'easymotion/vim-easymotion'
Plugin 'scrooloose/nerdcommenter'
call vundle#end()            " required

" Disable the tab selection of the YouCompleteMe
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

filetype plugin indent on    " required

" Remove trailing spaces on save
autocmd BufWritePre *.* :%s/\s\+$//e

set relativenumber
set number
set colorcolumn=80
set nowrap
set expandtab
set autoindent

set shiftwidth=4
set softtabstop=4
set cursorline  " Highlight the line under the cursor
colorscheme monokai

set smartcase
set ignorecase
set incsearch
set hlsearch

" Display commented out code in Italic
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
highlight Comment cterm=italic

set clipboard=unnamed
"Highlight the active split
nmap 0 ^
nmap k gk
nmap j gj

"Move lines up, down, left and right
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
nnoremap <C-l> >>
nnoremap <C-h> <<
vnoremap <C-h> <gv
vnoremap <C-l> >gv

" Scroll through the autocomple list with jk
inoremap <expr> j ((pumvisible())?("\<C-n>"):("j"))
inoremap <expr> k ((pumvisible())?("\<C-p>"):("k"))

" Quickly select the text you just pasted
nnoremap gp `[v`]

" http://vim.wikia.com/wiki/Copy_or_change_search_hit
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>

nmap <C-p> :FZF <CR>
let $FZF_DEFAULT_COMMAND= 'ag -g ""'

let g:indentLine_color_term = 239
let g:indentLine_char = '.'
highlight SpecialKey ctermfg=239

set list lcs=tab:\â”†_
set backspace=indent,eol,start

let g:used_javascript_libs = 'jquey,ramda,underscore,react,flux,chai,d3'

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Use silver searcher for grep 
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --hidden
endif
" bind <C-g> to grep word under cursor and open in quickfix buffer
" nnoremap <C-g> :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><C-w>L
nnoremap <C-g> :Ag <CR>
nnoremap <C-x> :q <CR>
nnoremap <C-t> :TernDefPreview <CR>
" map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Hit v to select one character
" Hit vagain to expand selection to word
" Hit v again to expand to paragraph
" Hit <C-v> go back to previous selection if I went too far
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Binding for wrapping arguments
nmap <Leader>aw :ArgWrap<CR>

" Copy the relative path of a filet to clipboard
nmap <Leader>% :let @+ = expand("%")<CR>

" Replace the word under cursor
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

" Clear highlighting on escape in normal mode
nnoremap <esc> :pc <CR> :noh <return><esc>
autocmd CompleteDone * pclose

if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif

" Auto hightlight the best match in autocomplete menu
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :  '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
